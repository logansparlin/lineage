/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type InternalLink = {
  _type: "internalLink";
  label?: string;
  to?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "homePage";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "aboutPage";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "projectPage";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "worksPage";
  };
};

export type ExternalLink = {
  _type: "externalLink";
  label?: string;
  url?: string;
};

export type RichTextSimple = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: never;
  markDefs?: Array<{
    to?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "aboutPage";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "homePage";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "projectPage";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "worksPage";
    };
    arrow?: boolean;
    _type: "internalLink";
    _key: string;
  } | {
    url?: string;
    arrow?: boolean;
    _type: "externalLink";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type RichText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SettingsFooter = {
  _id: string;
  _type: "settingsFooter";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  siteInfo?: Array<{
    text?: RichTextSimple;
    _type: "textBlock";
    _key: string;
  }>;
  links?: Array<{
    label?: string;
    _type: "search";
    _key: string;
  } | {
    label?: string;
    _type: "mainMenu";
    _key: string;
  } | {
    label?: string;
    _type: "bag";
    _key: string;
  }>;
};

export type SettingsHeader = {
  _id: string;
  _type: "settingsHeader";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  links?: Array<{
    _key: string;
  } & InternalLink>;
  contact?: {
    label?: string;
    content?: Array<{
      _key: string;
    } & ExternalLink>;
  };
  information?: {
    label?: string;
    content?: RichTextSimple;
  };
};

export type WorksPage = {
  _id: string;
  _type: "worksPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
};

export type ProjectPage = {
  _id: string;
  _type: "projectPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type HomePage = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
};

export type AboutPage = {
  _id: string;
  _type: "aboutPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | SanityAssetSourceData | InternalLink | ExternalLink | RichTextSimple | RichText | SettingsFooter | SettingsHeader | WorksPage | ProjectPage | Slug | HomePage | AboutPage;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/queries/home.ts
// Variable: homePageQuery
// Query: *[_type == "homePage"][0] {    title,  }
export type HomePageQueryResult = {
  title: string | null;
} | null;

// Source: ./sanity/queries/project.ts
// Variable: projectPathsQuery
// Query: *[_type == "projectPage"] {    "slug": slug.current  }
export type ProjectPathsQueryResult = Array<{
  slug: string | null;
}>;
// Variable: projectQuery
// Query: *[_type == "projectPage" && slug.current == $slug][0] {    title,    "slug": slug.current  }
export type ProjectQueryResult = {
  title: string | null;
  slug: string | null;
} | null;

// Source: ./sanity/queries/settings.ts
// Variable: settingsHeaderQuery
// Query: *[_type == "settingsHeader"][0] {    links[] {        _key,  _type,  label,  to -> {    _type,    "slug": slug.current  }    },    contact {      label,      content[] {        _key,        _type,        label,        url      }    },    information {      label,      content    }  }
export type SettingsHeaderQueryResult = {
  links: Array<{
    _key: string;
    _type: "internalLink";
    label: string | null;
    to: {
      _type: "aboutPage";
      slug: null;
    } | {
      _type: "homePage";
      slug: null;
    } | {
      _type: "projectPage";
      slug: string | null;
    } | {
      _type: "worksPage";
      slug: null;
    } | null;
  }> | null;
  contact: {
    label: string | null;
    content: Array<{
      _key: string;
      _type: "externalLink";
      label: string | null;
      url: string | null;
    }> | null;
  } | null;
  information: {
    label: string | null;
    content: RichTextSimple | null;
  } | null;
} | null;
// Variable: settingsFooterQuery
// Query: *[_type == "settingsFooter"][0] {    siteInfo[] {      _key,      _type,      _type == "textBlock" => {        text[] {          ...,          markDefs[] {            ...,            _type == "internalLink" => {              to->{                "slug": slug.current              },              arrow            },            _type == "externalLink" => {              url,              arrow            }          }        }      },      _type == "credit" => {        title,        credits[] {          _key,          label,          url        }      }    }  }
export type SettingsFooterQueryResult = {
  siteInfo: Array<{
    _key: string;
    _type: "textBlock";
    text: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs: Array<{
        url: string | null;
        arrow: boolean | null;
        _type: "externalLink";
        _key: string;
      } | {
        to: {
          slug: null;
        } | {
          slug: string | null;
        } | null;
        arrow: boolean | null;
        _type: "internalLink";
        _key: string;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
  }> | null;
} | null;
// Variable: settingsQuery
// Query: {    "header": *[_type == "settingsHeader"][0] {    links[] {        _key,  _type,  label,  to -> {    _type,    "slug": slug.current  }    },    contact {      label,      content[] {        _key,        _type,        label,        url      }    },    information {      label,      content    }  },    "footer": *[_type == "settingsFooter"][0] {    siteInfo[] {      _key,      _type,      _type == "textBlock" => {        text[] {          ...,          markDefs[] {            ...,            _type == "internalLink" => {              to->{                "slug": slug.current              },              arrow            },            _type == "externalLink" => {              url,              arrow            }          }        }      },      _type == "credit" => {        title,        credits[] {          _key,          label,          url        }      }    }  },  }
export type SettingsQueryResult = {
  header: {
    links: Array<{
      _key: string;
      _type: "internalLink";
      label: string | null;
      to: {
        _type: "aboutPage";
        slug: null;
      } | {
        _type: "homePage";
        slug: null;
      } | {
        _type: "projectPage";
        slug: string | null;
      } | {
        _type: "worksPage";
        slug: null;
      } | null;
    }> | null;
    contact: {
      label: string | null;
      content: Array<{
        _key: string;
        _type: "externalLink";
        label: string | null;
        url: string | null;
      }> | null;
    } | null;
    information: {
      label: string | null;
      content: RichTextSimple | null;
    } | null;
  } | null;
  footer: {
    siteInfo: Array<{
      _key: string;
      _type: "textBlock";
      text: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: never;
        markDefs: Array<{
          url: string | null;
          arrow: boolean | null;
          _type: "externalLink";
          _key: string;
        } | {
          to: {
            slug: null;
          } | {
            slug: string | null;
          } | null;
          arrow: boolean | null;
          _type: "internalLink";
          _key: string;
        }> | null;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    }> | null;
  } | null;
};

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"homePage\"][0] {\n    title,\n  }": HomePageQueryResult;
    "*[_type == \"projectPage\"] {\n    \"slug\": slug.current\n  }": ProjectPathsQueryResult;
    "*[_type == \"projectPage\" && slug.current == $slug][0] {\n    title,\n    \"slug\": slug.current\n  }": ProjectQueryResult;
    "*[_type == \"settingsHeader\"][0] {\n    links[] {\n      \n  _key,\n  _type,\n  label,\n  to -> {\n    _type,\n    \"slug\": slug.current\n  }\n\n    },\n    contact {\n      label,\n      content[] {\n        _key,\n        _type,\n        label,\n        url\n      }\n    },\n    information {\n      label,\n      content\n    }\n  }": SettingsHeaderQueryResult;
    "*[_type == \"settingsFooter\"][0] {\n    siteInfo[] {\n      _key,\n      _type,\n      _type == \"textBlock\" => {\n        text[] {\n          ...,\n          markDefs[] {\n            ...,\n            _type == \"internalLink\" => {\n              to->{\n                \"slug\": slug.current\n              },\n              arrow\n            },\n            _type == \"externalLink\" => {\n              url,\n              arrow\n            }\n          }\n        }\n      },\n      _type == \"credit\" => {\n        title,\n        credits[] {\n          _key,\n          label,\n          url\n        }\n      }\n    }\n  }": SettingsFooterQueryResult;
    "{\n    \"header\": *[_type == \"settingsHeader\"][0] {\n    links[] {\n      \n  _key,\n  _type,\n  label,\n  to -> {\n    _type,\n    \"slug\": slug.current\n  }\n\n    },\n    contact {\n      label,\n      content[] {\n        _key,\n        _type,\n        label,\n        url\n      }\n    },\n    information {\n      label,\n      content\n    }\n  },\n    \"footer\": *[_type == \"settingsFooter\"][0] {\n    siteInfo[] {\n      _key,\n      _type,\n      _type == \"textBlock\" => {\n        text[] {\n          ...,\n          markDefs[] {\n            ...,\n            _type == \"internalLink\" => {\n              to->{\n                \"slug\": slug.current\n              },\n              arrow\n            },\n            _type == \"externalLink\" => {\n              url,\n              arrow\n            }\n          }\n        }\n      },\n      _type == \"credit\" => {\n        title,\n        credits[] {\n          _key,\n          label,\n          url\n        }\n      }\n    }\n  },\n  }": SettingsQueryResult;
  }
}
